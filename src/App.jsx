import { useState, useEffect } from "react";
import Header from "./components/Header";
import SensorGrid from "./components/SensorGrid";
import MoistureChart from "./components/MoistureChart";
import Notifications from "./components/Notifications";
import Weather from "./components/Weather";
import "./App.css";

// üåç Translations
const translations = {
  en: { 
    title: "üå± Smart Agriculture Dashboard", notifications: "Notifications", empty: "No notifications yet",
    moisture: "Moisture", ph: "pH", tds: "TDS", temperature: "Temperature", humidity: "Humidity",
    trendMoisture: "üìä Moisture Level Trend", weatherTitle: "Weather Report" 
  },
  hi: { 
    title: "üå± ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡•É‡§∑‡§ø ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§°", notifications: "‡§∏‡•Ç‡§ö‡§®‡§æ‡§è‡§Ç", empty: "‡§ï‡•ã‡§à ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç",
    moisture: "‡§®‡§Æ‡•Ä", ph: "pH", tds: "‡§ü‡•Ä‡§°‡•Ä‡§è‡§∏", temperature: "‡§§‡§æ‡§™‡§Æ‡§æ‡§®", humidity: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
    trendMoisture: "üìä ‡§®‡§Æ‡•Ä ‡§∏‡•ç‡§§‡§∞ ‡§ï‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´", weatherTitle: "‡§Æ‡•å‡§∏‡§Æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü" 
  },
  mr: {
    title: "üå± ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§∂‡•á‡§§‡•Ä ‡§°‡•Ö‡§∂‡§¨‡•ã‡§∞‡•ç‡§°", notifications: "‡§∏‡•Ç‡§ö‡§®‡§æ", empty: "‡§Ö‡§¶‡•ç‡§Ø‡§æ‡§™ ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§®‡§æ‡§π‡•Ä",
    moisture: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ", ph: "pH", tds: "TDS", temperature: "‡§§‡§æ‡§™‡§Æ‡§æ‡§®", humidity: "‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ",
    trendMoisture: "üìä ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡•á‡§ö‡§æ ‡§ó‡•ç‡§∞‡§æ‡§´", weatherTitle: "‡§π‡§µ‡§æ‡§Æ‡§æ‡§® ‡§Ö‡§π‡§µ‡§æ‡§≤"
  },
  or: {
    title: "üå± ‡¨∏‡≠ç‡¨Æ‡¨æ‡¨∞‡≠ç‡¨ü ‡¨ï‡≠É‡¨∑‡¨ø ‡¨°‡≠ç‡≠ü‡¨æ‡¨∏‡¨¨‡≠ã‡¨∞‡≠ç‡¨°", notifications: "‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ", empty: "‡¨è‡¨™‡¨∞‡≠ç‡¨Ø‡≠ç‡≠ü‡¨®‡≠ç‡¨§ ‡¨ï‡≠å‡¨£‡¨∏‡¨ø ‡¨∏‡≠Ç‡¨ö‡¨®‡¨æ ‡¨®‡¨æ‡¨π‡¨ø‡¨Å",
    moisture: "‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ", ph: "pH", tds: "TDS", temperature: "‡¨§‡¨æ‡¨™‡¨Æ‡¨æ‡¨®", humidity: "‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ",
    trendMoisture: "üìä ‡¨Ü‡¨∞‡≠ç‡¨¶‡≠ç‡¨∞‡¨§‡¨æ ‡¨™‡¨∞‡¨ø‡¨ö‡≠ü ‡¨ó‡≠ç‡¨∞‡¨æ‡¨´", weatherTitle: "‡¨ñ‡¨¨‡¨∞ ‡¨™‡≠ç‡¨∞‡¨§‡¨ø‡¨¨‡≠á‡¨¶‡¨®"
  },
  gu: {
    title: "üå± ‡™∏‡´ç‡™Æ‡™æ‡™∞‡´ç‡™ü ‡™ï‡´É‡™∑‡™ø ‡™°‡´á‡™∂‡™¨‡´ã‡™∞‡´ç‡™°", notifications: "‡™∏‡´Ç‡™ö‡™®‡™æ‡™ì", empty: "‡™ï‡´ã‡™à ‡™∏‡´Ç‡™ö‡™®‡™æ ‡™®‡™•‡´Ä",
    moisture: "‡™®‡™Æ‡™ø‡™Ø‡™æ‡™£‡´Å‡™Ç", ph: "pH", tds: "TDS", temperature: "‡™§‡™æ‡™™‡™Æ‡™æ‡™®", humidity: "‡™Ü‡™∞‡´ç‡™¶‡´ç‡™∞‡™§‡™æ",
    trendMoisture: "üìä ‡™®‡™Æ‡™ø‡™Ø‡™æ‡™£‡´Å‡™Ç ‡™∏‡´ç‡™§‡™∞ ‡™ó‡´ç‡™∞‡™æ‡™´", weatherTitle: "‡™π‡™µ‡™æ‡™Æ‡™æ‡™® ‡™∞‡™ø‡™™‡´ã‡™∞‡´ç‡™ü"
  },
  ta: {
    title: "üå± ‡Æ∏‡Øç‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æü‡Øç ‡Æµ‡Øá‡Æ≥‡Ææ‡Æ£‡Øç‡ÆÆ‡Øà ‡Æü‡Ææ‡Æ∑‡Øç‡Æ™‡Øã‡Æ∞‡Øç‡Æü‡ØÅ", notifications: "‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç", empty: "‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æé‡Æ®‡Øç‡Æ§ ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà",
    moisture: "‡Æ®‡Æ©‡Øà‡Æµ‡ØÅ", ph: "pH", tds: "TDS", temperature: "‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà", humidity: "‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç",
    trendMoisture: "üìä ‡Æ®‡Æ©‡Øà‡Æµ‡ØÅ ‡Æ®‡Æø‡Æ≤‡Øà ‡Æµ‡Æ∞‡Æø‡Æö‡Øà", weatherTitle: "‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÖ‡Æ±‡Æø‡Æï‡Øç‡Æï‡Øà"
  },
  te: {
    title: "üå± ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞°‡∞æ‡∞∑‡±ç‚Äå‡∞¨‡±ã‡∞∞‡±ç‡∞°‡±Å", notifications: "‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å", empty: "‡∞á‡∞Ç‡∞ï‡∞æ ‡∞è ‡∞∏‡±Ç‡∞ö‡∞®‡∞≤‡±Å ‡∞≤‡±á‡∞µ‡±Å",
    moisture: "‡∞§‡±á‡∞Æ", ph: "pH", tds: "TDS", temperature: "‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§", humidity: "‡∞§‡±á‡∞Æ",
    trendMoisture: "üìä ‡∞§‡±á‡∞Æ ‡∞∏‡±ç‡∞•‡∞æ‡∞Ø‡∞ø ‡∞ó‡±ç‡∞∞‡∞æ‡∞´‡±ç", weatherTitle: "‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï"
  }
};

export default function App() {
  const [lang, setLang] = useState("en");
  const t = translations[lang];

  const [data, setData] = useState({ moisture: 45, ph: 6.5, tds: 700, temperature: 28, humidity: 60 });
  const [notifications, setNotifications] = useState([]);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    const interval = setInterval(() => {
      const newData = {
        moisture: Math.floor(Math.random() * 100),
        ph: (5 + Math.random() * 3).toFixed(2),
        tds: 600 + Math.floor(Math.random() * 200),
        temperature: 20 + Math.floor(Math.random() * 15),
        humidity: 30 + Math.floor(Math.random() * 60),
      };
      setData(newData);

      setHistory((prev) => [
        ...prev.slice(-9),
        { time: new Date().toLocaleTimeString(), moisture: newData.moisture },
      ]);

      const newNotifications = [];
      if (newData.moisture < 30) newNotifications.push({ id: Date.now() + 1, msg: "‚ö†Ô∏è Low Soil Moisture detected!" });
      if (newData.ph < 6 || newData.ph > 7.5) newNotifications.push({ id: Date.now() + 2, msg: "‚ö†Ô∏è Soil pH out of optimal range (6‚Äì7.5)!" });
      if (newData.humidity < 40 || newData.humidity > 70) newNotifications.push({ id: Date.now() + 3, msg: "‚ö†Ô∏è Humidity level is not ideal (40‚Äì70%)!" });

      if (newNotifications.length > 0) {
        setNotifications((prev) => [...prev, ...newNotifications]);
      }
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="dashboard">
      <Header lang={lang} setLang={setLang} t={t} notifications={notifications} />
      <Weather t={t} />
      <SensorGrid data={data} t={t} />
      <MoistureChart history={history} t={t} />
      <Notifications notifications={notifications} t={t} />
    </div>
  );
}